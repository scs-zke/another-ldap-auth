apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "another-ldap-auth.fullname" . }}
  labels:
    {{- include "another-ldap-auth.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "another-ldap-auth.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/secretLdap: {{ include (print $.Template.BasePath "/secret-ldap.yaml") . | sha256sum }}
        checksum/secretTls: {{ include (print $.Template.BasePath "/secret-tls.yaml") . | sha256sum }}
        checksum/secretTlsLdap: {{ include (print $.Template.BasePath "/secret-tls-ldap.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "another-ldap-auth.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 5
      serviceAccountName: {{ include "another-ldap-auth.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: LDAP_ENDPOINT
              value: "{{ .Values.ldap.endpoint }}"
            - name: LDAP_MANAGER_DN_USERNAME
              value: "{{ .Values.ldap.managerDnUsername }}"
            - name: LDAP_MANAGER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.ldap.existingSecret }}{{ .Values.ldap.existingSecret }}{{ else }}{{ include "another-ldap-auth.fullname" . }}{{ end }}
                  key: LDAP_MANAGER_PASSWORD
            - name: LDAP_SEARCH_BASE
              value: "{{ .Values.ldap.searchBase }}"
            - name: LDAP_SEARCH_FILTER
              value: "{{ .Values.ldap.searchFilter }}"
            - name: LDAP_BIND_DN
              value: "{{ .Values.ldap.bindDN }}"
            - name: LDAP_GROUP_MEMBERSHIP_ATTRIBUTE
              value: "{{ .Values.ldap.groupMembershipAttribute }}"
            - name: LDAP_ALLOWED_USERS
              value: "{{ .Values.ldap.allowedUsers }}"
            - name: LDAP_ALLOWED_GROUPS
              value: "{{ .Values.ldap.allowedGroups }}"
            - name: LDAP_ALLOWED_GROUPS_CONDITIONAL
              value: "{{ .Values.ldap.allowedGroupsConditional }}"
            - name: LDAP_ALLOWED_GROUPS_CASE_SENSITIVE
              value: "{{ .Values.ldap.allowedGroupsCaseSensitive }}"
            - name: LDAP_ALLOWED_GROUPS_USERS_CONDITIONAL
              value: "{{ .Values.ldap.allowedGroupsUsersConditional }}"
            - name: LDAP_REQUIRED_CONFIG_HEADERS
              value: "{{ .Values.ldap.requiredConfigHeaders }}"
            - name: LDAP_CACHE_EXPIRATION
              value: "{{ .Values.ldap.cacheExpiration }}"
            {{- if .Values.ldap.tlsCaCert }}
            - name: LDAP_TLS_CA_CERT_FILE
              value: /etc/ssl/private/ldap/ca.crt
            {{- end }}
            {{- if .Values.server.flaskSecretKey }}
            - name: FLASK_SECRET_KEY
              value: "{{ .Values.server.flaskSecretKey }}"
            {{- end }}
            - name: BRUTE_FORCE_PROTECTION
              value: "{{ .Values.server.bruteForceProtection }}"
            - name: BRUTE_FORCE_EXPIRATION
              value: "{{ .Values.server.bruteForceExpiration }}"
            - name: BRUTE_FORCE_FAILURES
              value: "{{ .Values.server.bruteForceFailures }}"
            - name: USE_WSGI_SERVER
              value: "{{ .Values.server.useWsgiServer }}"
            - name: RELOAD_ENABLED
              value: "{{ .Values.server.reloadEnabled }}"
            - name: TLS_ENABLED
              value: "{{ .Values.server.tlsEnabled }}"
            {{- if .Values.server.tlsEnabled }}
            - name: TLS_KEY_FILE
              value: /etc/ssl/private/tls/tls.key
            - name: TLS_CERT_FILE
              value: /etc/ssl/private/tls/tls.crt
            {{- if .Values.server.tlsCaCert }}
            - name: TLS_CA_CERT_FILE
              value: /etc/ssl/private/tls/ca.crt
            {{- end }}
            {{- end }}
            - name: NUMBER_OF_WORKERS
              value: "{{ .Vaules.server.numberOfWorkers }}"
            - name: PORT
              value: "{{ .Values.service.containerPort }}"
            - name: LOG_LEVEL
              value: "{{ .Values.server.logLevel }}"
            - name: LOG_FORMAT
              value: "{{ .Values.server.logFormat }}"
          ports:
            - containerPort: {{ .Values.service.containerPort }}
              protocol: {{ .Values.service.protocol }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.containerPort }}
              scheme: {{ .Values.server.tlsEnabled | ternary "HTTPS" "HTTP" }}
            initialDelaySeconds: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.service.containerPort }}
              scheme: {{ .Values.server.tlsEnabled | ternary "HTTPS" "HTTP" }}
            initialDelaySeconds: 3
          {{- if or .Values.server.tlsEnabled .Values.ldap.tlsCaCert }}
          volumeMounts:
            {{- if .Values.server.tlsEnabled }}
            - name: another-ldap-auth-tls
              mountPath: /etc/ssl/private/tls
              readOnly: true
            {{- end }}
            {{- if or .Values.ldap.tlsCaCert .Values.ldap.existingCaSecret }}
            - name: another-ldap-auth-tls-ldap
              mountPath: /etc/ssl/private/ldap
              readOnly: true
            {{- end }}
          {{- end }}
      {{- if or .Values.server.tlsEnabled .Values.ldap.tlsCaCert }}
      volumes:
        {{- if .Values.server.tlsEnabled }}
        - name: another-ldap-auth-tls
          secret:
          {{- if not .Values.server.existingSecret }}
            secretName: {{ include "another-ldap-auth.fullname" . }}-tls
          {{- else }}
            secretName: {{ .Values.server.existingSecret }}
          {{- end }}
        {{- end }}
        {{- if or .Values.ldap.tlsCaCert .Values.ldap.existingCaSecret }}
        - name: another-ldap-auth-tls-ldap
          secret:
          {{- if not .Values.ldap.existingCaSecret }}
            secretName: {{ include "another-ldap-auth.fullname" . }}-tls-ldap
          {{- else }}
            secretName: {{ .Values.ldap.existingCaSecret }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
